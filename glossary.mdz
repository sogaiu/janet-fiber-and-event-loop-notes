{:title "Glossary"
 :template "docpage.html"
 # XXX: somewhere near or at the end?
 #:order
 }
---

Among other reasons, maintaining an appropriate glossary allows handy
reference and more consistent communication and thought.  Note that
there is a tendency in typical English language writing to push toward
using different words in nearby text and this can lead to more
confusion especially when dealing with technical concepts.  A glossary
can also be helpful in selecting appropriate terms for documentation
and communication but also listing synonyms that are already in use.

* channel - one of two methods of communication between tasks.  (See
  stream for another.)

  * ordinary, non-threaded - allows the programmer to communicate by
    sending any Janet value as messages, and only work inside a
    thread - they do not allow communication between threads,
    processes, or over the network.

  * threaded - allows the programmer to communicate Janet values
    between threads.  XXX: limits of the sorts of things that can be
    transferred is not so clear.

* event loop - provides concurrency within a single thread by allowing
  cooperating fibers to yield instead of blocking forward progress.

* fiber - allows a process to stop and resume execution later,
  essentially enabling multiple returns from a function.

  * ordinary, non-root - the programmer can resume this type of fiber
    using @code`resume`.  XXX: it's unclear whether there is a
    well-accepted / firmly established term for this.

  * task, root - a fiber that will be automatically resumed when an
    event (or sequence of events) that it is waiting for occurs.  The
    programmer should not try to resume this type of fiber.

    Note that in a standard janet build, a task is the same as a root
    fiber.  The root fiber for the current fiber is the oldest
    ancestor that does not have a parent.  It is obtainable via the
    @code`root/fiber` function.  A task is sometimes referred to as "a
    fiber that was scheduled to run by the event loop" or "a fiber on
    the event loop".

* signal - a value "raised" by a fiber during its execution.  an
  ancestor fiber that has an appropriate "mask" can trap / block /
  capture (and examine) such values and take some kind of action.

  note that this kind of signal is different from a POSIXy system's
  signal.  For that type of signal, see @code`os/proc-kill` and
  @code`os/sigaction`.

* stream - one of two methods of communication between tasks.  (See
  channel for anotrher.)  They are wrappers around file descriptors
  and operate on streams of bytes.  Streams can communicate across
  threads, processes, and across the network.
